#include<iostream>
#include<string.h>
#include<math.h>
using namespace std;
class Algorithm
{
public:
int marks;
string choice;
int call1Algorithm()
{
marks=135;//fetched marks from rank Predictor
cout<<"The Algorithm is fetching rank for "<<marks<<" ";
return marks;
}
string call2Algorithm()
{
choice="Common";//fetched choice from rank Predictor
cout<<"for "<<choice<<" category... \n";
return choice;
}
void callMethod(int rank18,int rank17)
{
int i,j,difficulty_level,min,max,no_digit18,no_digit17,temp,t;
cout<<"Please enter the difficulty level according to paper analyser for
this year\n";
cin>>difficulty_level;// if difficulty level increases min range shifts to
left side
int difficulty_level1=6;//difficulty level for year 2018
int difficulty_level2=5;//difficulty level for year 2017
if(difficulty_level1<difficulty_level2)
{
t=difficulty_level1;
difficulty_level1=difficulty_level2;
difficulty_level2=t;
t=max;
max=min;
min=t;
}
temp=rank18,no_digit18=0,no_digit17=0;
while(temp>0)
{
temp=temp/10;
no_digit18+=1;
}
temp=rank17;
while(temp>0)
{
temp=temp/10;
no_digit17+=1;
}
if(difficulty_level>=difficulty_level1)
{
min=rank18;
max=rank18;
int k=no_digit18-2;
if(k<0)
k=0;
if(rank18>3 && rank18<10)
{
min=min-2;
max=max+2;
}
else if(rank18>10 && rank18<20)
{
min=min-7;
max=max+7;
}
else if(rank18>19 && rank18<31)
{
min=min-10;
max=max+10;
}
else if(rank18<100)
{
min=min-2*pow(10,k+1);
max=max+2*pow(10,k+1);
}
else
{
min=min-3*pow(10,k);
max=max+3*pow(10,k);
}
}
else
//if(difficulty_level<difficulty_level2)
{
min=rank17;
max=rank17;
int k=no_digit17-2;
if(k<0)
k=0;
if(rank17>3 && rank17<10)
{
min=min-2;
max=max+2;
}
else if(rank17>10 && rank17<20)
{
min=min-7;
max=max+7;
}
else if(rank17>19 && rank17<31)
{
min=min-10;
max=max+10;
}
else if(rank17<100)
{
min=min-2*pow(10,k+1);
max=max+2*pow(10,k+1);
}
else
{
min=min-3*pow(10,k);
max=max+3*pow(10,k);
}
}
cout<<"Possible rank range for your marks is "<<min<<"-"<<max;
}
};
class RankDb
{
public:
void Rank(int mark,int year,string c)
{
cout<<"Rank on mark "<<mark<<" for year "<<year<<" for "<<c<<" category is ";
}
int commonrank18(int mark)
{
int q=0,i,marks=mark,r,rank,p=0;
int
Commonrank_db18[10000]={337,272,258,247,240,233,227,223,219,216,213, 210,207,204,202,200,198,196,195,193,191,190,188, 187,185,184,182,181,180,179,177,176,175,174,173,172,171,170,169,168, 167,165,164,164,163,162,161,161,160,159,158,158, 156,155,154,154,153,152,152,151,150,150,149,148,148,147,147,146,145, 145,144,144,143,143,142,142,141,140,140,139,139, 138,138,137,137,136,136,135,135,135,134,134,133,133,132,132,131,131, 131,130,130,129,129,129,128,128,127,127,127,126, 126,126,125,125,124,124,124,123,123,123,122,122,122,121,121,121,120,120, 120,119,119,119,118,118,118,117,117,117,116, 116,116,115,115,115,115,114,114,114,113,113,113,113,112,112,112,111,111, 111,110,110,110,110,109,109,109,108,108,108, 107,107,107,107,106,106,106,105,105,105,105,104,104,104,104,103,103,103, 102,102,102,102,101,101,101,101,101,100,100, 100,99,99,99,99,98,98,98,98,98,97,97,97,97,96,96,96,96,95,95,95,95,94,94,94, 94,94,93,93,93,93,92,92,92,92,91,91,91, 91,90,90,90,90,90,89,89,89,88,88,88,88,87,87,87,87,86,86,86,85,85,85,85, 84,84,84,84,84,83,83,83,82,82,82,82,81,80,80, 79,79,79,78,78,78,78,77,76,75,74,73,72,71,70,69,68,67,66,65,64,63,62,61, 60,59,58,57,56,55,54,53,52,51,50,49,48,47,46, 45,44,43,42,41,40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,21, 20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4, 3,2,1,0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11};//Rank 1-337 marks,Rank
101-272 marks,Rank 201-258 marks,Rank 301-247 marks
/* In real the first index will give the 1st ranker's mark but due to
lack of DB here the interval taken btw 2 indices is 100*/
for(i=0;i<10000;i++)
{
if(Commonrank_db18[i]==marks)
{r=i;
rank=r*100+1;
return rank;
break;}
if(Commonrank_db18[i]<marks)
{
if(i==0)
rank=i;
else
{
r=i;
rank=(r*100+1);
p=Commonrank_db18[i-1]-Commonrank_db18[i];
int q=marks-Commonrank_db18[i];
rank=rank-(rank*q)/p;
}
return rank;
break;
}
}
}
int obcrank18(int mark)
{
int q=0,i,marks=mark,rank,r;
int
OBCrank_db18[10000]={319,213,198,188,179,173,167,163,159,155,152,149,1
46,143,141,138,136,134,132,130,129,127,126,124, 123,121,120,118,117,116,115,113,112,111,110,109,108,107,106,105,104, 103,102,101,100,99,99,98,97,96,95,94,93,92,91,90, 89,88,88,87,86,85,85,84,83,83,82,81,81,81,80,79,79,78,77,76,75,74,74,73, 72,72,72,71,70,69,68,67,66,65,64,63,62,61,60, 59,58,57,56,55,54,53,52,51,50,49,48,47,46,45,44,43,42,41,40,39,38,37,36, 35,34,33,32,31,30,29,28,27,26,25,24,23,21,20, 19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0,-1,-2,-3,-4,-5,-6,-7,-8};
for(i=0;i<10000;i++)
{
if(OBCrank_db18[i]==marks)
{
r=i;
rank=r*100+1;
return rank;
break;}
if(OBCrank_db18[i]<marks)
{
if(i==0)
rank=i;
else
{
r=i;
rank=(r*100+1);
int p=OBCrank_db18[i-1]-OBCrank_db18[i];
int q=marks-OBCrank_db18[i];
rank=rank-(rank*q)/p;
}
return rank;
break;
}
}
}
int scrank18(int mark)
{
int
SCrank_db18[10000]={278,148,130,117,109,104,98,93,89,86,83,80,78,75,73,7
1,69,66,64,63,61,59,57,56,54,52,51,49,48,46,45,45, 44,43,42,41,40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,21,20, 19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0, -1,-2,-3,-4,-5,-6,-7,-8};
int q=0,i,marks=mark,rank,r;
for(i=0;i<10000;i++)
{
if(SCrank_db18[i]==marks)
{r=i;
rank=r*100+1;
return rank;
break;}
if(SCrank_db18[i]<marks)
{
if(i==0)
rank=i;
else
{
r=i;
rank=(r*100+1);
int p=SCrank_db18[i-1]-SCrank_db18[i];
int q=marks-SCrank_db18[i];
rank=rank-(rank*q)/p;
}
return rank;
break;
}
}
}
int strank18(int mark)
{
int q=0,i,marks=mark,rank,r;
int
STrank_db18[10000]={266,124,101,85,76,68,61,55,50,46,45,44,42,40,35,33,3
1,28,25,22,21,19,17,15,13,11,7,3,1,-1,-5};
for(i=0;i<10000;i++)
{
if(STrank_db18[i]==marks)
{r=i;
rank=r*100+1;
return rank;
break;}
if(STrank_db18[i]<marks)
{
if(i==0)
rank=i;
else
{
r=i;
rank=(r*100+1);
int p=STrank_db18[i-1]-STrank_db18[i];
int q=marks-STrank_db18[i];
rank=rank-(rank*q)/p;
return rank;
}
break;
}
}
}
int commonrank17(int mark)
{
int
Commonrank_db17[10000]={339,305,295,289,284,279,276,272,269,266,264, 261,258,257,254,253,251,249,247,246,244,243,241, 240,238,237,233,232,231,229,228,227,226,225,224,223,221,220,219,218, 217,217,216,215,214,213,213,212,211,210,209,208,207,206, 206,205,205,204,204,203,202,202,201,200,200,199,198,198,197,197,196, 195,195,194,193,193,192,191,190,190,189,189,188,188,187, 187,186,186,185,184,184,184,184,183,182,182,181,181,181,180,180,179, 179,178,178,177,177,176,175,174,173,173,172,172,171,171, 171,170,170,170,169,169,169,169,168,168,167,167,167,166,166,166,165, 165,164,164,164,163,163,163,162,162,162,161,161,161,160, 160,160,159,159,159,159,158,158,157,157,157,157,156,156,156,156,155, 155,155,155,154,154,154,153,153,152,152,152,151,151,151, 151,150,150,150,149,149,149,149,149,148,148,148,148,148,148,147,147, 147,147,146,146,145,145,145,145,144,144,144,144,144,144, 144,143,142,142,142,142,142,141,141,141,141,141,140,140,140,140,140, 139,139,139,139,138,138,138,138,138,137,137,137,137,137, 137,136,136,136,136,136,135,135,135,135,135,135,134,134,134,134,133, 133,133,133,133,133,133,133,132,132,132,132,132,131,131, 131,131,130,130,130,130,130,130,129,129,129,129,129,129,129,129,129, 128,128,128,128,128,128,128,127,127,127,126,126,126,125, 125,124,124,124,123,123,123,122,122,122,121,121,121,120,120,120,119, 119,119,118,118,118,117,117,117,116,116,116,115,115,115, 115,114,114,114,113,113,113,113,112,112,112,111,111,111,110,110,110, 110,109,109,109,108,108,108,107,107,107,107,106,106,106, 105,105,105,105,104,104,104,104,103,103,103,102,102,102,102,101,101, 101,101,101,100,100,100,99,99,99,99,98,98,98,98,98,97,97, 97,97,96,96,96,96,95,95,95,95,94,94,94,94,94,93,93,93,93,92,92,92,92,91, 91,91,91,90,90,90,90,90,89,89,89,88,88,88,88,87,87,87,
87,86,86,86,85,85,85,85,84,84,84,84,84,83,83,83,82,82,82,82,81,80,80,79, 79,79,78,78,78,78,77,76,75,74,73,72,71,70,69,68,67,66, 65,64,63,62,61,60,59,58,57,56,55,54,53,52,51,50,49,48,47,46,45,44,43,42, 41,40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24, 23,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0,-1,-2,-3,-4,-5,-6, -7,-8};
int q=0,i,marks=mark,rank,r,p;
for(i=0;i<100000;i++){
if(Commonrank_db17[i]==marks)
{r=i;
rank=r*100+1;
return rank;
break;}
if(Commonrank_db17[i]<marks)
{
if(i==0)
rank=i;
else
{
r=i;
rank=(r*100+1);
p=Commonrank_db17[i-1]-Commonrank_db17[i];
int q=marks-Commonrank_db17[i];
rank=rank-(rank*q)/p;
}
return rank;
break;
}
}
}
int obcrank17(int mark)
{
int
OBCrank_db17[10000]={340,209,193,183,170,168,165,156,152,149,146,144,1
42,140,138,136,134,132,131,129,128,127,126,125,125, 123,122,121,119,116,114,113,112,112,111,110,109,108,107,106,105,104, 103,102,101,100,99,98,97,96,96,95,93,92,91,90,89,88,88,
87,86,85,85,84,83,83,82,81,81,81,80,79,79,78,77,76,75,74,74,73,72,72,72, 71,70,69,68,67,66,65,64,63,62,61,60,59,58,57,56,55, 54,53,52,51,50,49,48,47,46,45,44,43,42,41,40,39,38,37,36,35,34,33,32,31, 30,29,28,27,26,25,24,23,21,20,19,18,17,16,15,14,13, 12,11,10,9,8,7,6,5,4,3,2,1,0,-1,-2,-3,-4,-8};
int q=0,i,marks=mark,rank,r,p;
for(i=0;i<10000;i++)
{
if(OBCrank_db17[i]==marks)
{r=i;
rank=r*100+1;
return rank;
break;}
if(OBCrank_db17[i]<marks)
{
if(i==0)
rank=i;
else
{
r=i;
rank=(r*100+1);
p=OBCrank_db17[i-1]-OBCrank_db17[i];
int q=marks-OBCrank_db17[i];
rank=rank-(rank*q)/p;
}
return rank;
break;
}
}
}
int scrank17(int mark)
{
int
SCrank_db17[10000]={273,188,130,117,107,104,98,93,87,86,83,80,78,75,73,7
1,69,65,64,63,61,59,57,56,54,52,51,49,48,46,45,45, 44,43,42,41,40,39,38,37,36,35,34,34,32,31,30,29,28,27,27,25,24,23,21,20, 19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0, -1,-2,-3,-4,-5,-6,-7,-8};
int q=0,i,marks=mark,rank,r;
for(i=0;i<10000;i++)
{
if(SCrank_db17[i]==marks)
{r=i;
rank=r*100+1;
return rank;
break;}
if(SCrank_db17[i]<marks)
{
if(i==0)
rank=i;
else
{
r=i;
rank=(r*100+1);
int p=SCrank_db17[i-1]-SCrank_db17[i];
int q=marks-SCrank_db17[i];
rank=rank-(rank*q)/p;
}
return rank;
break;
}
}
}
int strank17(int mark)
{
int
STrank_db17[10000]={256,134,111,76,76,67,61,56,50,46,45,44,40,40,35,33,3
1,29,27,22,20,19,17,15,12,11,7,3,1,-1,-5};
int q=0,i,marks=mark,rank,r;
for(i=0;i<10000;i++)
{
if(STrank_db17[i]==marks)
{r=i;
rank=r*100+1;
return rank;
break;}
if(STrank_db17[i]<marks)
{
if(i==0)
rank=i;
else
{
r=i;
rank=(r*100+1);
int p=STrank_db17[i-1]-STrank_db17[i];
int q=marks-STrank_db17[i];
rank=rank-(rank*q)/p;
}
return rank;
break;
}
}
}
int callRankDb18(int mark,string choice)
{
Rank(mark,2018,choice);
int y;
if(choice=="Common")
y=commonrank18(mark);
else if(choice=="OBC")
y=obcrank18(mark);
else if(choice=="SC")
y=scrank18(mark);
else if(choice=="ST")
y=strank18(mark);
cout<<y<<"\n";
return y;
}
int callRankDb17(int mark,string choice)
{
Rank(mark,2017,choice);
int y;
if(choice=="Common")
y=commonrank17(mark);
else if(choice=="OBC")
y=obcrank17(mark);
else if(choice=="SC")
y=scrank17(mark);
else if(choice=="ST")
y=strank17(mark);
cout<<y<<"\n";
return y;
}
};
int main()
{
Algorithm a;
RankDb r;
int rank18,rank17,getMarks;
string getChoice;
getMarks=a.call1Algorithm();
getChoice=a.call2Algorithm();
rank18=r.callRankDb18(getMarks,getChoice);
rank17=r.callRankDb17(getMarks,getChoice);
a.callMethod(rank18,rank17);
}
